{"version":3,"sources":["BackGroundProcess.ts"],"names":[],"mappings":";AAAA,IAAY,CAAC,WAAM,QAAQ,CAAC,CAAA;AAC5B,yBAA4B,UAAU,CAAC,CAAA;AAC9B,wCAAO,CAAwB;AACxC,IAAO,OAAO,WAAW,UAAU,CAAC,CAAC;AAGrC;IAMK;QAHD,oBAAe,GAAY,EAAE,CAAC;QAC9B,2BAAsB,GAAW,KAAK,CAAC;IAExB,CAAC;IAEf,mDAAuB,GAAvB,UAAwB,UAAc;QACnC,MAAM,CAAC;YAEH,IAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,UAAA,QAAQ,IAAI,OAAA,QAAQ,EAAR,CAAQ,CAAC,CAAC;YAEpD,sBAAW,CAAC,IAAI,CACZ,UAAU,EACV;gBACI,YAAA,UAAU;gBACV,MAAA,IAAI;aACP,CACJ,CAAC;QACN,CAAC,CAAC;IACL,CAAC;IAGD,6CAAiB,GAAjB;QAAA,iBAkCC;QAjCE,sBAAW,CAAC,EAAE,CAAC,kBAAkB,EAAE,UAAC,KAAK,EAAE,OAAO;YACvC,mCAAU,EAAE,2BAAQ,EAAE,mBAAI,EAAE,2BAAQ,CAAY;YAIvD,IAAM,yBAAyB,GAAO,CAAC,CAAC,GAAG,CACvC,IAAI,EACJ,UAAA,GAAG,IAAI,OAAA,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,aAAa,CAAC,GAAG,KAAI,CAAC,uBAAuB,CAAE,GAAG,CAAC,YAAY,CAAC,CAAE,GAAG,GAAG,EAAnF,CAAmF,CAC7F,CAAC;YAEF,OAAO,CAAC,OAAO,EAAE;iBACZ,IAAI,CAAC,cAAM,OAAA,MAAA,KAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAC,QAAQ,YAAK,yBAAyB,CAAC,UAAxE,CAAwE,CAAC;iBACpF,IAAI,CAAC,UAAC,MAAM;gBACT,sBAAW,CAAC,IAAI,CACZ,kBAAkB,EAClB;oBACI,QAAA,MAAM;oBACN,UAAA,QAAQ;oBACR,UAAU,EAAE,oBAAoB;iBACnC,CACJ,CAAC;YACN,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,MAAM;gBACV,sBAAW,CAAC,IAAI,CACZ,kBAAkB,EAClB;oBACI,QAAA,MAAM;oBACN,UAAA,QAAQ;oBACR,UAAU,EAAE,mBAAmB;iBAClC,CACJ,CAAC;YACN,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACN,CAAC;IAGD,0CAAc,GAAd,UAAe,gBAAoB;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;QACvC,CAAC;QACD,IAAM,OAAO,GAAK,IAAI,OAAO,CAAC,cAAc,CAAC,CAAA;QAC7C,IAAI,UAAU,GAAI,OAAO,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,gBAAgB,CAAC;IACvD,CAAC;IAEN,wBAAC;AAAD,CAvEA,AAuEC,IAAA;AAvEa,yBAAiB,oBAuE9B,CAAA","file":"BackGroundProcess.js","sourcesContent":["import * as _ from \"lodash\";\nimport { ipcRenderer } from \"electron\";\nconst {  Hashids } = require(\"hashids\");\nimport Promise = require(\"bluebird\");\n\n\nexport class  BackGroundProcess {\n\n\n    backgroundTasks:any = <any>{};\n    hasRegisteredListeners:boolean = false;\n\n     constructor(){}\n\n     turnCallbackIntoIpcCall(functionId:any) {\n        return function() {\n            // Filter all non-enumarable properties\n            const args = _.map(arguments, argument => argument);\n\n            ipcRenderer.send(\n                'CALLBACK',\n                {\n                    functionId,\n                    args\n                }\n            );\n        };\n     }\n\n\n     registerListeners() {\n        ipcRenderer.on('BACKGROUND_START', (event, payload) => {\n            const {moduleHash, funcName, args, eventKey} = payload;\n\n            // In order for callbacks to execute in the foreground they\n            // must be replaced with an IPC call\n            const argsWithCallbacksReplaced:any = _.map(\n                args,\n                arg => _.get(arg, '$isFunction') ? this.turnCallbackIntoIpcCall( arg['functionId'] ) : arg\n            );\n\n            Promise.resolve()\n                .then(() => this.backgroundTasks[moduleHash][funcName](...argsWithCallbacksReplaced))\n                .then((result) => {\n                    ipcRenderer.send(\n                        'BACKGROUND_REPLY',\n                        {\n                            result,\n                            eventKey,\n                            resultType: 'BACKGROUND_RESOLVE'\n                        }\n                    );\n                })\n                .catch((reason) => {\n                    ipcRenderer.send(\n                        'BACKGROUND_REPLY',\n                        {\n                            reason,\n                            eventKey,\n                            resultType: 'BACKGROUND_REJECT'\n                        }\n                    );\n                });\n        });\n     }\n\n\n     registerModule(backgroundModule:any) {\n        if (!this.hasRegisteredListeners) {\n            this.registerListeners();\n            this.hasRegisteredListeners = true;\n        }\n        const hashIds  =  new Hashids('cpuIntensive')\n        var moduleHash =  hashIds.encode(1,2,3);\n        this.backgroundTasks[moduleHash] = backgroundModule;\n     }\n\n}"],"sourceRoot":"../"}