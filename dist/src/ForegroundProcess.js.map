{"version":3,"sources":["ForegroundProcess.ts"],"names":[],"mappings":"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","file":"ForegroundProcess.js","sourcesContent":["import * as _ from \"lodash\";\nconst { ipcRenderer } =  require(\"electron\");\nimport * as uuid from 'node-uuid';\nimport Hashids  = require(\"hashids\");\nimport Promise = require(\"bluebird\");\n\n\n\nexport class ForegroundProcess{\n\n\n    constructor(){}\n\n\n    getModule(originalModule:any):any{\n\n        const promiseWrappedModule:any = {};\n        var hashIds  =  new Hashids('my cpu intensive');\n        var moduleHash =  hashIds.encode([1,2,3]);\n        const _ref:any = this;\n        _.forEach(originalModule, (func, funcName) => {\n          if (_.isFunction(func)) {\n            promiseWrappedModule[funcName] = function() {\n              // Remove non-enumarable properties of arguments\n              const args:any  = _.map(arguments, (element) => element);\n              return _ref.run(  moduleHash,\n                           funcName,\n                           args\n                         );\n            };\n          }\n        });\n        return promiseWrappedModule;\n    }\n\n\n    private taskCompleteCallback(eventKey, resolve, reject, event, data) {\n          const {resultType, result, reason, eventKey: replyEventKey} = data;\n\n          if (replyEventKey === eventKey) {\n            switch (resultType) {\n            case 'BACKGROUND_RESOLVE':\n              ipcRenderer.removeListener('BACKGROUND_REPLY', this.taskCompleteCallback);\n              resolve(result);\n              break;\n            case 'BACKGROUND_REJECT':\n              ipcRenderer.removeListener('BACKGROUND_REPLY', this.taskCompleteCallback);\n              reject(reason);\n              break;\n            default:\n            }\n          }\n    }\n\n    callbackCallback(functionsById, event, data) {\n      const {functionId, args} = data;\n      if (functionsById[functionId]) {\n        functionsById[functionId](...args);\n      }\n    }\n\n\n    private  run(moduleHash, funcName, args):any {\n          const eventKey = uuid.v4();\n\n          const functionsById = {};\n          const argsWithCallbacksReplaced = _.map(args, arg => {\n            if (!_.isFunction(arg)) {\n              return arg;\n            }\n\n            const functionId = uuid.v4();\n            functionsById[functionId] = arg;\n            return {\n              $isFunction: true,\n              functionId\n            };\n          });\n\n          const payload = {\n            moduleHash,\n            funcName,\n            args: argsWithCallbacksReplaced,\n            eventKey\n          };\n\n          return new Promise((resolve, reject) => {\n            if (_.some(args, _.isFunction)) {\n              // When a callback is executed in the background process it sends an\n              // IPC event named 'CALLBACK'.\n              ipcRenderer.on('CALLBACK', this.callbackCallback.bind(this, functionsById));\n            }\n            ipcRenderer.on('BACKGROUND_REPLY', this.taskCompleteCallback.bind(this, eventKey, resolve, reject));\n            ipcRenderer.send('BACKGROUND_START', payload);\n          });\n     }\n\n\n\n}"],"sourceRoot":"../"}