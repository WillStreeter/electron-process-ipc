{"version":3,"sources":["MainProcess.ts"],"names":[],"mappings":";AAAA,IAAY,CAAC,WAAM,QAAQ,CAAC,CAAA;AAC5B,IAAA,wBAAoD,EAA7C,gCAAa,EAAE,oBAAO,CAAwB;AAErD,IAAI,iBAAiB,GAAO,EAAE,CAAC;AAE/B;IAQI;QACI,IAAI,CAAC,wBAAwB,GAAG;YAC5B,SAAS,YAAC,aAAa;gBACnB,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC1C,CAAC;SACJ,CAAA;IACL,CAAC;IAEA,yCAAmB,GAAnB;QACI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;IAEF,6CAAuB,GAAvB,UAAwB,GAAU,EAAE,KAAS;QAA7C,iBAyBC;QAxBG,IAAI,CAAC,gBAAgB,GAAG,IAAI,aAAa,EAAE,CAAC;QAE5C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEnC,OAAO,CAAC,EAAE,CAAC,kBAAkB,EAAE,UAAC,KAAK,EAAE,MAAM;YACzC,KAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,CAAC;QAClH,CAAC,CAAC,CAAC;QAGH,OAAO,CAAC,EAAE,CAAC,kBAAkB,EAAE,UAAC,KAAK,EAAE,MAAM;YACzC,KAAI,CAAC,0BAA0B,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAGH,OAAO,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,KAAK,EAAE,OAAO;YAClC,KAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAGH,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC;IACzC,CAAC;IAEO,gDAA0B,GAAlC,UAAmC,SAAgB,EAAE,OAAW;QAC5D,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,UAAC,gBAAgB;YAC1C,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;QAChG,CAAC,CAAC,CAAC;IACP,CAAC;IAGL,kBAAC;AAAD,CAtDA,AAsDC,IAAA;AAtDY,mBAAW,cAsDvB,CAAA","file":"MainProcess.js","sourcesContent":["import * as _ from \"lodash\";\nconst {BrowserWindow, ipcMain} = require('electron');\n\nvar foregroundWindows:any = [];\n\nexport class MainProcess{\n\n    public backgroundWindow:any;\n\n    public backgroundProcessHandler:any;\n\n\n\n    constructor(){\n        this.backgroundProcessHandler = {\n            addWindow(browserWindow) {\n                foregroundWindows.push(browserWindow);\n            }\n        }\n    }\n\n     getBackgroundWindow(){\n         return this.backgroundWindow;\n     }\n\n    createBackgroundProcess(url:string, debug:any) {\n        this.backgroundWindow = new BrowserWindow();\n\n        if (!debug) {\n            this.backgroundWindow.hide();\n        }\n\n        this.backgroundWindow.loadURL(url);\n\n        ipcMain.on('BACKGROUND_START', (event, result) => {\n            this.backgroundWindow.webContents.send.apply(this.backgroundWindow.webContents, ['BACKGROUND_START', result]);\n        });\n\n\n        ipcMain.on('BACKGROUND_REPLY', (event, result) => {\n            this.sendToAllForegroundWindows('BACKGROUND_REPLY', result);\n        });\n\n\n        ipcMain.on('CALLBACK', (event, payload) => {\n            this.sendToAllForegroundWindows('CALLBACK', payload);\n        });\n\n\n        return this.backgroundProcessHandler;\n    }\n\n    private sendToAllForegroundWindows(eventName:string, payload:any) {\n        _.forEach(foregroundWindows, (foregroundWindow) => {\n            foregroundWindow.webContents.send.apply(foregroundWindow.webContents, [eventName, payload]);\n        });\n    }\n\n\n}"],"sourceRoot":"../"}